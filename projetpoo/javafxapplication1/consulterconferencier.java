/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javafxapplication1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


/**
 *
 * @author mohamed
 */
public class consulterconferencier extends javax.swing.JFrame {
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/projetpoo";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "";

    private DefaultListModel<String> listModel;

    public consulterconferencier() {
        initComponents();
        setLocationRelativeTo(null);
        listModel = new DefaultListModel<>();
        jList1.setModel(listModel);
        jList1.setVisible(false);
        jButton2.setVisible(false);
        
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        textenom = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));
        setPreferredSize(new java.awt.Dimension(800, 500));

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));

        textenom.setBackground(new java.awt.Color(0, 153, 153));
        textenom.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        textenom.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Liberation Sans", 0, 15), new java.awt.Color(51, 255, 51)), "Entrer le nom", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Liberation Sans", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        textenom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textenomActionPerformed(evt);
            }
        });

        jButton1.setText("Consulter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(0, 153, 153));

        jList1.setBackground(new java.awt.Color(0, 153, 153));
        jList1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jList1.setSelectionBackground(new java.awt.Color(204, 204, 204));
        jList1.setSelectionForeground(new java.awt.Color(0, 153, 153));
        jScrollPane1.setViewportView(jList1);

        jButton2.setBackground(new java.awt.Color(204, 51, 0));
        jButton2.setText("Supprimer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton6.setText("previous");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(152, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(textenom, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(209, 209, 209))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(347, 347, 347)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton6)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton6)
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textenom, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 799, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textenomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textenomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textenomActionPerformed
            
    private boolean successsuppression=false;
    private void supprimerConferencier(int idConferencier) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
         PreparedStatement statement = connection.prepareStatement("DELETE FROM conferencier WHERE id_conferencier = ?")) {
        // Set the parameter for the SQL statement
        statement.setInt(1, idConferencier);
        
        // Execute the SQL statement
        int rowsAffected = statement.executeUpdate();
        
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Le conférencier a été supprimé avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
            successsuppression=true;
        } else {
            JOptionPane.showMessageDialog(this, "Aucun conférencier trouvé avec cet identifiant.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (SQLException ex) {
        System.err.println("Erreur lors de la suppression du conférencier: " + ex.getMessage());
        JOptionPane.showMessageDialog(this, "Erreur lors de la suppression du conférencier.", "Erreur", JOptionPane.ERROR_MESSAGE);
    }
}

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

         // Récupérer l'élément sélectionné dans la liste
    String selectedConferencier = jList1.getSelectedValue();
    
    // Vérifier si un élément est sélectionné
    if (selectedConferencier != null) {
        // Diviser la chaîne pour récupérer l'ID du conférencier
        String[] parts = selectedConferencier.split("\\s+");
        String idConferencierString = parts[0];
        
        try {
            // Convertir l'ID du conférencier en un nombre entier
            int idConferencier = Integer.parseInt(idConferencierString);
            
            // Appeler la méthode pour supprimer le conférencier de la base de données
            supprimerConferencier(idConferencier);
            
            if (successsuppression) {
                // Mise à jour de la liste après la suppression
                ArrayList<String> conferenciers = rechercherConferenciers(textenom.getText().trim());
                listModel.clear();
                for (String conferencier : conferenciers) {
                    listModel.addElement(conferencier);
                }
            } 
        } catch (NumberFormatException e) {
            // Gérer l'exception si l'ID du conférencier ne peut pas être converti en nombre entier
            JOptionPane.showMessageDialog(this, "Erreur lors de la récupération de l'ID du conférencier.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    } else {
        // Aucun élément sélectionné dans la liste
        JOptionPane.showMessageDialog(this, "Veuillez sélectionner un conférencier à supprimer.", "Information", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed

     private ArrayList<String> rechercherConferenciers(String nom) {
        ArrayList<String> conferenciers = new ArrayList<>();
        try (Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
                PreparedStatement statement = connection.prepareStatement("SELECT * FROM conferencier WHERE nom = ?")) {
            statement.setString(1, nom);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                String conferencier = resultSet.getString("id_conferencier") + "     " + resultSet.getString("nom") + "     " + resultSet.getString("pays_origine")
                        + "  " + resultSet.getString("institution") + "  " + resultSet.getString("titre_presentation");
                conferenciers.add(conferencier);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la recherche des conférenciers: " + ex.getMessage());
        }
        return conferenciers;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    String nom = textenom.getText().trim();

    if (nom.isEmpty() || !nom.matches("[a-zA-Z ]+")) {
        JOptionPane.showMessageDialog(this, "Veuillez entrer un nom valide.", "Erreur", JOptionPane.ERROR_MESSAGE);
    } else {
        successsuppression = false;
        // Rechercher les conférenciers dans la base de données
        ArrayList<String> conferenciers = rechercherConferenciers(nom);

        if (!conferenciers.isEmpty()) {
            listModel.clear(); // Efface tous les éléments précédents de la liste
            for (String conferencier : conferenciers) {
                listModel.addElement(conferencier); // Ajoute chaque conférencier à la liste
            }
            jList1.setVisible(true);
            jButton2.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Aucun conférencier trouvé avec ce nom.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }
 

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    this.dispose();
    manipulation manipulationPage = new manipulation();
    manipulationPage.setVisible(true);       
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
         /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(consulterconferencier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new consulterconferencier().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField textenom;
    // End of variables declaration//GEN-END:variables
}
